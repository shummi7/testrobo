{"version":3,"sources":["components/Searchbox.js","components/Cards.js","components/Cardbox.js","components/Scroll.js","container/App.js","action.js","constants.js","serviceWorker.js","reducer.js","index.js"],"names":["Searchbox","_ref","searchField","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","id","name","email","src","concat","alt","CardBox","robots","CardComponent","map","user","i","Cards","key","Scroll","props","style","overflow","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","descFunction","document","getElementsByClassName","visibility","closeFunc","state","_this2","fetch","then","response","json","setState","_this3","filteredRobots","filter","robot","toLowerCase","includes","length","onClick","components_Searchbox","searchChangeFunc","components_Scroll","Cardbox","Component","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initial_state","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_container_App","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5047a913.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n const Searchbox=({searchField, searchChange})=>{\r\n     return (\r\n         <div>\r\n            <input className='pa3 ba b--green mb4 bg-lightest-blue' \r\n             type='search' placeholder='Search Robots'\r\n                 onChange={searchChange}\r\n             />\r\n         </div>\r\n     )\r\n }\r\n\r\n export default Searchbox;","import React from 'react';\r\n\r\nconst Card=({id,name,email})=>{\r\n    return(\r\n        <div className='tc grow white bg-purple br3 pa3 ma2 dib bw2 shadow-5'>\r\n            <img src={`https://robohash.org/l${id}?size=200x200`} alt='robot'/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Cards';\r\n\r\n\r\nconst CardBox=({robots})=>{\r\n\r\n    const CardComponent= robots.map((user,i)=>{\r\n        return(\r\n            <Card key   = {i}\r\n                  name  = {robots[i].name}\r\n                  id    = {robots[i].id}\r\n                  email = {robots[i].email}/>\r\n        )\r\n    })\r\n\r\nreturn(<div >\r\n        {CardComponent}       \r\n       </div>)\r\n\r\n}\r\n\r\nexport default CardBox;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props)=>{\r\n    return(\r\n        <div style={{ overflow: 'scroll', height: '800px'}} >\r\n    {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\nimport './App.css';\nimport Searchbox from '../components/Searchbox';\nimport CardBox from '../components/Cardbox';\nimport Scroll from '../components/Scroll';\n// import {robots} from './Robot';\n\nimport {connect} from 'react-redux';\nimport {action_setSearchField} from '../action';\n\nconst mapStateToProps=state=>{\n  return{\n     searchField:state.searchField\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return{\n    searchChangeFunc:(event)=>{\n      dispatch(action_setSearchField(event.target.value))\n    }\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      robots:[]\n      // searchField: ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(user=>{this.setState({robots:user})});\n  }\n\n  // searchChangeFunc=(event)=>{\n  //       this.setState({searchField:event.target.value});\n  //    }\n  descFunction=()=>{\n    var describe=document.getElementsByClassName('describe')[0];\n    describe.style.visibility='visible';\n  }\n  closeFunc=()=>{\n    var describe=document.getElementsByClassName('describe')[0];\n    describe.style.visibility='hidden';\n  }\n  render() {\n\n    const filteredRobots=this.state.robots.filter(robot=>{\n      return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n    })\n\n    return !this.state.robots.length ?\n      <h1>Loading</h1> :\n      (\n      <div className = 'tc'>\n      <h1>ROBOFRIENDS</h1>\n      <p className='que' onClick={this.descFunction}><span>&#10068;</span></p>\n      <div className='describe'>\n     <p> It is  a responsive application made with React that dynamically searches Robot contact cards with input. The\ncontact data are fetched from JSON file and used RoboHash API to make custom robots. The search function is integrated with Redux to manage the states.\n</p>\n<button className='close' onClick={this.closeFunc}>CLOSE</button></div>\n      <Searchbox searchChange = {this.props.searchChangeFunc}/>\n      <Scroll>\n      <CardBox   robots       = {filteredRobots}/>\n      </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD} from './constants';\r\n\r\nexport const action_setSearchField=(text)=>({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD} from './constants'\r\n\r\nconst initial_state={\r\n    searchField:''\r\n}\r\n\r\nexport const reducer_searchRobots =(state=initial_state,action={})=>{\r\n     switch(action.type){\r\n         case CHANGE_SEARCH_FIELD:\r\n         return(Object.assign({},state,{searchField:action.payload}));\r\n         default:\r\n         return state;\r\n     }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport {reducer_searchRobots} from './reducer';\n\nconst store=createStore(reducer_searchRobots)\n\nReactDOM.render(<Provider store={store}>\n                <App />\n                </Provider>, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}